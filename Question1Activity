package randhawa.deep.faceflash;
import android.animation.Animator;
import android.content.Intent;
import android.content.SharedPreferences;
import android.os.Bundle;
import android.support.v7.app.ActionBarActivity;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.view.ViewAnimationUtils;
import android.view.animation.AccelerateInterpolator;
import android.os.Build;
import android.view.animation.AlphaAnimation;
import android.view.animation.Animation;
import android.widget.Button;

public class Question1Activity extends ActionBarActivity {

    SharedPreferences sharedPreferences;
    Button b0,b1,b2,b3;
    private String gameType; 	//type of game (facial rec or name rec)
    private int streak;  //current score streak
    public int highScore;      //highscore (need to somehow load this from device memory)
    private Profile[] profileArray; //array of profiles sorted with profile[0] being least recognized and profile[i] best recognized
    private int size;            //size of profile array
    private int[] profiles;      //array of index of theseprofiles
    private Profile[] profileMemory; //remembers the last 5 profiles

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_question1);
        sharedPreferences = getSharedPreferences("randhawa" +
                ".deep" +
                ".faceflash", MODE_PRIVATE);
      //  String name = sharedPreferences.getString("Name" + element, "Borat");
      //  String urlAdd = sharedPreferences.getString("ImageUrl"+element, "url");

        profileMemory = new Profile[5];
        boolean next = true; //
        boolean correct;
      //  gameType = gametype[0];
        size = sharedPreferences.getInt("Count", 0);
        //populate array of prototypes
        String name;
        String picture;
        for(int i = 0; i < size; i++) {
           name = sharedPreferences.getString("Name" + i, "Borat");
           picture = sharedPreferences.getString("ImageUrl"+i, "url");
           profileArray[0] = new Profile(name, picture);

        }

        int roundCount = 0; //keeps track of the rounds if we want to add a status bar

        correct = this.playQuestion();
        this.askNext();

        while (next == true)   {
            this.playQuestion();
            this.askNext();
            roundCount += 1;

            if (roundCount == 9) {
                statusBar();
                roundCount = 0;
            }
        }
    }

    //plays one question
    public boolean playQuestion() {
        Boolean correct;
        Profile retrievedProfile; //the actual answer (element was chosen)
        Profile userAnswer; //the answer
        Profile[] choices;

        retrievedProfile = this.generateQuestion();
        choices = this.generateChoices(retrievedProfile);

        userAnswer = this.getUserAnswer();

        if (userAnswer == retrievedProfile) {
            correct = true;
        } else {
            correct = false;
        }

        this.updateDatabase(retrievedProfile, correct);
        this.updateMemory(retrievedProfile);
        return correct;

    }

    public Profile generateQuestion() {
        return profileArray[(int) (Math.random()*size)];
    }

    public Profile[] generateChoices(Profile retrievedProfile){
        int seed = (int) (Math.random()*4);
        Profile[] choice = new Profile[3];

        choice[0] =  generateRandom(retrievedProfile, retrievedProfile, retrievedProfile, retrievedProfile);
        choice[1] =  generateRandom(retrievedProfile, choice[0], retrievedProfile, retrievedProfile);
        choice[2] =  generateRandom(retrievedProfile, choice[0], choice[1], retrievedProfile);
        choice[3] =  generateRandom(retrievedProfile, choice[0], choice[1], choice[2]);

        choice[seed] = retrievedProfile;

        return choice;
    }

    public void updateDatabase(Profile profile, boolean correct) {
        Profile temp;
        profile.setMemoryTier(correct);
        int index = 0;

        for (int j = 0; j < size; j++) {
            if (profile == profileArray[j])
                index = j;
        }

        if ((correct == false) && ( index+1 < size)) {
            streak = 0;
            temp = profile;
            profileArray[index+1] = profile;
            profileArray[index] = temp;
        } else if ((index-1) >= 0) {
            streak = streak + 1;
            temp = profileArray[index-1];
            profiles[index-1] = profiles[index];
            profileArray[index] = temp;
        }

    }


    public void updateMemory(Profile profile) {
       Profile temp;

        for (int i = 0; i < profileMemory.length - 1; i++) {
            temp = profileMemory[i] ;
            profileMemory[i] = profile;
            profileMemory[i+1] = temp;
        }
    }

    public Profile generateRandom(Profile a, Profile b, Profile c, Profile d) {

        Profile generated = profileArray[(int)(Math.random()*size)];

        while ((generated == a) || (generated == b) || (generated == c) || (generated == d))
            generated = profileArray[(int)(Math.random()*size)];

        return generated;

    }

    private void askNext() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    private Profile getUserAnswer() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    private boolean isRepeat(Profile generatedProfile) {

        for (int i = 0; i < profileMemory.length; i++){
            if (profileMemory[i] == generatedProfile)
                return true;
        }

        return false;
    }

    private void statusBar(){
        int red = 0;
        int yellow = 0;
        int green = 0;
        int temp;
        int size;

        for (int i = 0; i < profiles.length; i++) {
            temp = profileArray[i].getMemoryTier();
            if (temp < 2)
                red += 1;
            if ((temp >= 2) && (temp <= 5))
                yellow += 1;
            if (temp > 5)
                green += 1;
        }

        size = red + yellow + green;
        // code to divide progress bar into red, yellow and green sectoin

        //rewards here:
        if (red == 0) {
            System.out.println("Congratulations! You vaguely recognize everyone in your binder. Keep up the good work! ");
        }

        if (red >= (size*.5) ) {
            System.out.println("Congratulations! You vaguely recognize half of everyone in your binder. Keep up the good work! ");
        }

        if (green == size ) {
            System.out.println("CONGRATULATIONS. You have master memory.");
        }
    }


    public int generateNumber(){
        double random = Math.random();
        int element;
        int count = sharedPreferences.getInt("Count", 0);
        if (random < 0.5){
            element = (int) ((random)*(count/30));
        }
        else {
            element = (int) ((random)*(count+1));
        }

        return element;
    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        // Inflate the menu; this adds items to the action bar if it is present.
        getMenuInflater().inflate(R.menu.menu_question1, menu);
        return true;
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        // Handle action bar item clicks here. The action bar will
        // automatically handle clicks on the Home/Up button, so long
        // as you specify a parent activity in AndroidManifest.xml.
        int id = item.getItemId();

        //noinspection SimplifiableIfStatement
        if (id == R.id.action_settings) {
            return true;
        }

        return super.onOptionsItemSelected(item);
    }

    public void checkAnswer(View view) {
        // previously invisible view
        View myView = findViewById(R.id.correctView);

        // get the center for the clipping circle
        int cx = (myView.getLeft() + myView.getRight()) / 2;
        int cy = (myView.getTop() + myView.getBottom()) / 2;

        // get the final radius for the clipping circle
        int finalRadius = Math.max(myView.getWidth(), myView.getHeight());

        // create the animator for this view (the start radius is zero)
        if(Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP){
            Animator anim = ViewAnimationUtils.createCircularReveal(myView, cx, cy, 0, finalRadius);

            // make the view visible and start the animation
            myView.setVisibility(View.VISIBLE);
            anim.start();
        } else{
            Animation fadeIn = new AlphaAnimation(0, 1);
            fadeIn.setInterpolator(new AccelerateInterpolator()); //add this
            fadeIn.setDuration(1000);
            myView.setAnimation(fadeIn);
            myView.startAnimation(fadeIn);
        }
        Intent intent = new Intent(this, CorrectAnswerActivity.class);
        startActivity(intent);
        finish();
    }
}

